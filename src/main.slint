import { DatePickerPopup, ScrollView } from "std-widgets.slint";
import { FilledButton, TextField, NavigationBar, MaterialText, Vertical, Horizontal, TextButton, ListView, ScrollView, MaterialWindow, NavigationItem } from "../material-1.0/material.slint";

struct WorkerWithTimes {
    name: string,
    checked_in_time: string,
    checked_out_time: string,
    current_total_hours: string,
    color: color,
    barcode: string,
    show_name: bool,
}

struct ReportItem {
    name: string,
    daily_hours: string,
    weekly_hours: string,
    monthly_hours: string,
}

struct WorkerInfo {
    name: string,
    barcode: string,
}

component WorkerTile inherits Rectangle {
    width: 450px;
    height: 60px;

    in property <string> name;
    in property <string> status;
    in property <string> time;
    in property <color> background_color;

    background: background_color;
    Horizontal {
        MaterialText {
            text: name;
            font-size: 20px;
            color: background_color == #ff0000 ? #ffffff : #000000;
            horizontal-alignment: center;
            width: 150px;
        }

        MaterialText {
            text: status;
            font-size: 18px;
            color: background_color == #ff0000 ? #ffffff : #000000;
            horizontal-alignment: center;
            width: 120px;
        }

        MaterialText {
            text: time;
            font-size: 18px;
            color: background_color == #ff0000 ? #ffffff : #000000;
            horizontal-alignment: center;
            width: 120px;
        }
    }
}

export component MainWindow inherits MaterialWindow {
    title: "Timesheet";
    width: 1920px;
    height: 1080px;

    in-out property <[WorkerWithTimes]> workers: [];
    property <string> barcode_input: "";
    in-out property <[string]> worker_names: [];
    in-out property <[ReportItem]> reports: [];
    in-out property <[WorkerInfo]> management_workers: [];
    in-out property <string> selected_worker: "";
    in-out property <string> selected_worker_barcode: "";
    in-out property <string> selected_date;
    in-out property <string> current_time_display: "";
    in-out property <string> error_message: "";

    in-out property <bool> show_time: true;
    in-out property <bool> show_reports: false;
    in-out property <bool> show_workers_tab: false;

    property <int> current_tab: root.show_time ? 0 : root.show_reports ? 1 : 2;
    property <[NavigationItem]> nav_items: [
        { icon: @image-url("../material-1.0/ui/icons/schedule.svg"), text: "Time" },
        { icon: @image-url("../material-1.0/ui/icons/calendar_today.svg"), text: "Reports" },
        { icon: @image-url("../material-1.0/ui/icons/chevron_forward.svg"), text: "Workers" }
    ];

    callback barcode_scanned(string);
    callback add_worker(string, string);
    callback edit_worker(string, string, string);
    callback date_changed();

    date-picker := DatePickerPopup {
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        close-policy: PopupClosePolicy.no-auto-close;

        accepted(date) => {
            selected_date = "" + date.year + "-" + (date.month < 10 ? "0" : "") + date.month + "-" + (date.day < 10 ? "0" : "") + date.day;
            date_changed();
            date-picker.close();
        }
        canceled => {
            date-picker.close();
        }
    }

    FocusScope {
        key-pressed(event) => {
            if event.text == "\n" {
                barcode_scanned(barcode_input);
                barcode_input = "";
            } else {
                barcode_input += event.text;
            }
            return accept;
        }

        Vertical {
            NavigationBar {
                height: 80px;
                items: root.nav_items;
                current_index: root.current_tab;

                index_changed(index) => {
                    show_time = index == 0;
                    show_reports = index == 1;
                    show_workers_tab = index == 2;
                }
            }

            if show_time: Horizontal {
                // Current time display on the left (1/3 width)
                Rectangle {
                    width: root.width / 3;
                    Vertical {
                        MaterialText {
                            text: "Current Time";
                            horizontal-alignment: center;
                            font-size: 24px;
                            font-weight: 700;
                        }

                        MaterialText {
                            text: current_time_display;
                            horizontal-alignment: center;
                            font-size: 72px;
                            font-weight: 700;
                        }

                        MaterialText {
                            text: "Santiago, Chile";
                            horizontal-alignment: center;
                            font-size: 18px;
                        }
                    }
                }

                // Worker table on the right (2/3 width)
                Vertical {
                    width: root.width * 2 / 3;
                    Horizontal {
                        MaterialText {
                            text: "Name";
                            horizontal-alignment: center;
                            width: 200px;
                            font-weight: 700;
                            font-size: 20px;
                        }

                        MaterialText {
                            text: "Checked In";
                            horizontal-alignment: center;
                            width: 200px;
                            font-weight: 700;
                            font-size: 20px;
                        }

                        MaterialText {
                            text: "Checked Out";
                            horizontal-alignment: center;
                            width: 200px;
                            font-weight: 700;
                            font-size: 20px;
                        }

                        MaterialText {
                            text: "Duration";
                            horizontal-alignment: center;
                            width: 200px;
                            font-weight: 700;
                            font-size: 20px;
                        }
                    }

                    ListView {
                        for worker in workers: Vertical {
                            Rectangle {
                                background: worker.color;
                                Horizontal {
                                    MaterialText {
                                        text: worker.show_name ? worker.name : "";
                                        horizontal-alignment: center;
                                        width: 200px;
                                        font-size: 18px;
                                        color: worker.color == #ff0000 ? #ffffff : #000000;
                                    }

                                    MaterialText {
                                        text: worker.checked_in_time;
                                        horizontal-alignment: center;
                                        width: 150px;
                                        font-size: 18px;
                                        color: worker.color == #ff0000 ? #ffffff : #000000;
                                    }

                                    MaterialText {
                                        text: worker.checked_out_time;
                                        horizontal-alignment: center;
                                        width: 150px;
                                        font-size: 18px;
                                        color: worker.color == #ff0000 ? #ffffff : #000000;
                                    }

                                    MaterialText {
                                        text: worker.current_total_hours;
                                        horizontal-alignment: center;
                                        width: 120px;
                                        font-size: 18px;
                                        color: worker.color == #ff0000 ? #ffffff : #000000;
                                    }
                                }

                                MaterialText {
                                    text: error_message;
                                    color: #ff0000;
                                    font-size: 18px;
                                }
                            }
                        }
                    }
                }
            }
            if show_reports: Vertical {
                Horizontal {
                    FilledButton {
                        text: @tr("Elija la fecha");

                        clicked => {
                            date_picker.show();
                        }
                    }
                }

                Horizontal {
                    MaterialText {
                        text: "Worker";
                        horizontal-alignment: center;
                        width: 300px;
                        font-weight: 700;
                        font-size: 18px;
                    }

                    MaterialText {
                        text: "Daily";
                        horizontal-alignment: center;
                        width: 200px;
                        font-weight: 700;
                        font-size: 18px;
                    }

                    MaterialText {
                        text: "Weekly";
                        horizontal-alignment: center;
                        width: 200px;
                        font-weight: 700;
                        font-size: 18px;
                    }

                    MaterialText {
                        text: "Monthly";
                        horizontal-alignment: center;
                        width: 200px;
                        font-weight: 700;
                        font-size: 18px;
                    }
                }

                ListView {
                    for report in reports: Horizontal {
                        MaterialText {
                            text: report.name;
                            horizontal-alignment: center;
                            width: 300px;
                            font-size: 16px;
                        }

                        MaterialText {
                            text: report.daily_hours;
                            horizontal-alignment: center;
                            width: 200px;
                            font-size: 16px;
                        }

                        MaterialText {
                            text: report.weekly_hours;
                            horizontal-alignment: center;
                            width: 200px;
                            font-size: 16px;
                        }

                        MaterialText {
                            text: report.monthly_hours;
                            horizontal-alignment: center;
                            width: 200px;
                            font-size: 16px;
                        }
                    }
                }
            }

            if show_workers_tab: Vertical {
                Horizontal {
                    MaterialText {
                        text: "Add Worker:";
                        font-size: 18px;
                    }

                    add-name := TextField {
                        placeholder_text: "Name";
                    }

                    add-barcode := TextField {
                        placeholder_text: "Barcode";
                    }

                    FilledButton {
                        text: "Add";
                        clicked => {
                            add_worker(add-name.text, add-barcode.text);
                            add-name.text = "";
                            add-barcode.text = "";
                        }
                    }
                }

                ListView {
                    for worker in management_workers: TouchArea {
                        Vertical {
                            MaterialText {
                                text: worker.name;
                                font-size: 18px;
                            }
                        }

                        clicked => {
                            selected_worker = worker.name;
                            selected_worker_barcode = worker.barcode;
                        }
                    }
                }

                if selected_worker != "": Vertical {
                    Horizontal {
                        MaterialText {
                            text: "Edit Worker:";
                            font-size: 18px;
                        }

                        edit-name := TextField {
                            text: selected_worker;
                        }

                        edit-barcode := TextField {
                            text: selected_worker_barcode;
                        }
                    }

                    Horizontal {
                        FilledButton {
                            text: "Save";
                            clicked => {
                                edit_worker(selected_worker, edit-name.text, edit-barcode.text);
                                selected_worker = "";
                                selected_worker_barcode = "";
                            }
                        }
                    }
                }
            }
        }
    }
}
