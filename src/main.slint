import { DatePickerPopup, ScrollView } from "std-widgets.slint";
import { FilledButton, TextField, NavigationBar, MaterialText, Vertical, Horizontal, TextButton, ListView, ScrollView, MaterialWindow, NavigationItem } from "../material-1.0/material.slint";

struct WorkerWithTimes {
    name: string,
    checked_in_time: string,
    checked_out_time: string,
    current_total_hours: string,
    color: color,
    barcode: string,
    show_name: bool,
}

struct ReportItem {
    name: string,
    daily_hours: string,
    weekly_hours: string,
    monthly_hours: string,
}

struct WorkerInfo {
    name: string,
    barcode: string,
}

export component MainWindow inherits MaterialWindow {
    title: "Timesheet";
    width: 1920px;
    height: 1080px;

    in-out property <[WorkerWithTimes]> workers: [];
    property <string> barcode_input: "";
    in-out property <[string]> worker_names: [];
    in-out property <[ReportItem]> reports: [];
    in-out property <[WorkerInfo]> management_workers: [];
    in-out property <string> selected_worker: "";
    in-out property <string> selected_worker_barcode: "";
    in-out property <string> selected_date;
    in-out property <string> current_time_display: "";
    in-out property <string> error_message: "";
    in-out property <string> printer_status_message: "Printer status unknown";

    in-out property <bool> show_time: true;
    in-out property <bool> show_reports: false;
    in-out property <bool> show_workers_tab: false;
    in-out property <bool> show_settings: false;

    // Confirmation dialog properties
    in-out property <string> confirm_worker_name: "";
    in-out property <string> confirm_action: "";
    in-out property <bool> show_confirm_dialog: false;
    in-out property <bool> trigger_dialog_show: false;

    // number of 100ms ticks since last key; -1 = disabled / idle
 in-out property <int> ticks_since_key: -1;

    // Error dialog properties
    in-out property <string> error_dialog_message: "";
    in-out property <bool> show_error_dialog: false;
    in-out property <bool> trigger_error_dialog_show: false;

    // Periodic watchdog: re-arm itself every trigger
    watchdog_timer := Timer {
        interval: 100ms;
        running: true;             // keep it ticking forever
    triggered => {
        // re-arm the periodic timer
        self.running = true;

            if show_time && ticks_since_key >= 0 {
                ticks_since_key += 1;

            // 3 ticks = ~300ms inactivity; adjust to taste (e.g., 4→400ms)
            if ticks_since_key >= 3 && barcode_input != "" {
                    barcode_input = "";
                // stop counting until next character arrives
                ticks_since_key = -1;
                }
            }
        }
    }

    inactivity_timer := Timer {
        interval: 100ms;   // 250–400ms is a good range for scanners
        running: false;
        triggered => {
            if show_time && barcode_input != "" {
            // No keys within window → clear partial buffer
            barcode_input = "";
            }
            // one-shot behavior: timer stays off until restarted by next key
            self.running = false;
        }
    }

    // Auto-close timer for confirmation dialog
    auto-close-timer := Timer {
        interval: 2s;
        running: false;
        triggered => {
            show_confirm_dialog = false;
            confirmation-dialog.close();
        }
    }

    // Auto-close timer for error dialog
    auto-close-error-timer := Timer {
        interval: 2s;
        running: false;
        triggered => {
            show_error_dialog = false;
            error-dialog.close();
        }
    }

    // Show dialog timer - triggers immediately when dialog should be shown
    show-dialog-timer := Timer {
        interval: 1ms;
        running: trigger_dialog_show;
        triggered => {
            if show_confirm_dialog {
                confirmation-dialog.show();
                auto-close-timer.running = true;
            }
            // Reset the trigger
            trigger_dialog_show = false;
        }
    }

    // Show error dialog timer
    show-error-dialog-timer := Timer {
        interval: 1ms;
        running: trigger_error_dialog_show;
        triggered => {
            if show_error_dialog {
                error-dialog.show();
                auto-close-error-timer.running = true;
            }
            // Reset the trigger
            trigger_error_dialog_show = false;
        }
    }

    // Current time update timer
    current_time_update_timer := Timer {
        interval: 1s;
        running: true;
        triggered => {
            update_current_time();
        }
    }

    property <int> current_tab: root.show_time ? 0 : root.show_reports ? 1 : root.show_workers_tab ? 2 : 3;
    property <[NavigationItem]> nav_items: [
        { icon: @image-url("../material-1.0/ui/icons/schedule.svg"), text: "Time" },
        { icon: @image-url("../material-1.0/ui/icons/calendar_today.svg"), text: "Reports" },
        { icon: @image-url("../material-1.0/ui/icons/chevron_forward.svg"), text: "Workers" },
        { icon: @image-url("../material-1.0/ui/icons/menu.svg"), text: "Settings" }
    ];

    callback barcode_scanned(string);
    callback add_worker(string, string);
    callback edit_worker(string, string, string);
    callback date_changed();
    callback print_report();
    callback test_printer_connection();
    callback confirm_check_action(bool); // true for confirm, false for cancel
    callback show_notification_dialog();
    callback close_error_dialog();
    callback update_current_time;

    date-picker := DatePickerPopup {
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        close-policy: PopupClosePolicy.no-auto-close;

        accepted(date) => {
            selected_date = "" + date.year + "-" + (date.month < 10 ? "0" : "") + date.month + "-" + (date.day < 10 ? "0" : "") + date.day;
            date_changed();
            date-picker.close();
        }
        canceled => {
            date-picker.close();
        }
    }

    confirmation-dialog := PopupWindow {
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        width: 400px;
        height: 150px;
        visible: show_confirm_dialog;

        Rectangle {
            background: #ffffff;
            border-radius: 8px;
            border-width: 1px;
            border-color: #cccccc;

            Vertical {
                padding: 20px;
                spacing: 15px;

                MaterialText {
                    text: confirm_worker_name + " - " + confirm_action;
                    font-size: 18px;
                    font-weight: 500;
                    horizontal-alignment: center;
                }

                Horizontal {
                    alignment: center;

                    FilledButton {
                        text: "Aceptar";
                        clicked => {
                            auto-close-timer.running = false;
                            show_confirm_dialog = false;
                        }
                    }
                }
            }
        }
    }

    error-dialog := PopupWindow {
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        width: 400px;
        height: 150px;
        visible: show_error_dialog;

        Rectangle {
            background: #ffffff;
            border-radius: 8px;
            border-width: 1px;
            border-color: #cccccc;

            Vertical {
                padding: 20px;
                spacing: 15px;

                MaterialText {
                    text: error_dialog_message;
                    font-size: 18px;
                    font-weight: 500;
                    horizontal-alignment: center;
                    color: #ff0000;
                }

                Horizontal {
                    alignment: center;

                    FilledButton {
                        text: "Cerrar";
                        clicked => {
                            auto-close-error-timer.running = false;
                            show_error_dialog = false;
                            close_error_dialog();
                        }
                    }
                }
            }
        }
    }

    barcode_scope := FocusScope {
        // grab focus when the window starts
        init => {
            barcode_scope.focus();
        }

        key-pressed(event) => {
            if show_time {
            // finish scan on LF (Enter)
            if event.text == "\n" {
                    if barcode_input != "" {
                        barcode_scanned(barcode_input);
                        barcode_input = "";
                    }
                    ticks_since_key = -1; // stop inactivity counting
                return accept;
                }

            // buffer any printable text
            if event.text != "" {
                    barcode_input += event.text;
                    ticks_since_key = 0;   // reset inactivity window
            }
                return accept;
            }
            return reject;
        }

        Vertical {
            NavigationBar {
                height: 80px;
                items: root.nav_items;
                current_index: root.current_tab;

                index_changed(index) => {
                    show_time = index == 0;
                    show_reports = index == 1;
                    show_workers_tab = index == 2;
                    show_settings = index == 3;
                    // Focus the barcode input area when switching to time tab
                    if show_time {
                        // make sure our FocusScope receives keyboard input
                        barcode_scope.focus();
                    }
                }
            }

            if show_time: Horizontal {
                // Current time display on the left (1/3 width)
                Rectangle {
                    width: root.width / 3;
                    Vertical {
                        MaterialText {
                            text: "Current Time";
                            horizontal-alignment: center;
                            font-size: 24px;
                            font-weight: 700;
                        }

                        MaterialText {
                            text: current_time_display;
                            horizontal-alignment: center;
                            font-size: 72px;
                            font-weight: 700;
                        }

                        MaterialText {
                            text: "Santiago, Chile";
                            horizontal-alignment: center;
                            font-size: 18px;
                        }
                    }
                }

                // Worker table on the right (2/3 width)
                Vertical {
                    width: root.width * 2 / 3;
                    Horizontal {
                        MaterialText {
                            text: "Nombre";
                            horizontal-alignment: center;
                            width: 250px;
                            font-weight: 700;
                            font-size: 20px;
                        }

                        MaterialText {
                            text: "Entrada";
                            horizontal-alignment: center;
                            width: 250px;
                            font-weight: 700;
                            font-size: 20px;
                        }

                        MaterialText {
                            text: "Salida";
                            horizontal-alignment: center;
                            width: 250px;
                            font-weight: 700;
                            font-size: 20px;
                        }

                        MaterialText {
                            text: "Duración";
                            horizontal-alignment: center;
                            width: 250px;
                            font-weight: 700;
                            font-size: 20px;
                        }
                    }

                    ListView {
                        for worker in workers: Vertical {
                            spacing: 0px;
                            padding: 0px;
                            Rectangle {
                                background: worker.color;
                                Horizontal {
                                    MaterialText {
                                        text: worker.show_name ? worker.name : "";
                                        horizontal-alignment: center;
                                        width: 250px;
                                        font-size: 24px;
                                        color: worker.color == #ff0000 ? #ffffff : #000000;
                                    }

                                    MaterialText {
                                        text: worker.checked_in_time;
                                        horizontal-alignment: center;
                                        width: 250px;
                                        font-size: 24px;
                                        color: worker.color == #ff0000 ? #ffffff : #000000;
                                    }

                                    MaterialText {
                                        text: worker.checked_out_time;
                                        horizontal-alignment: center;
                                        width: 250px;
                                        font-size: 24px;
                                        color: worker.color == #ff0000 ? #ffffff : #000000;
                                    }

                                    MaterialText {
                                        text: worker.current_total_hours;
                                        horizontal-alignment: center;
                                        width: 250px;
                                        font-size: 24px;
                                        color: worker.color == #ff0000 ? #ffffff : #000000;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if show_reports: Vertical {
                Horizontal {
                    FilledButton {
                        text: @tr("Elija la fecha");

                        clicked => {
                            date_picker.show();
                        }
                    }

                    FilledButton {
                        text: "Print Report";

                        clicked => {
                            print_report();
                        }
                    }
                }

                Horizontal {
                    MaterialText {
                        text: "Worker";
                        horizontal-alignment: center;
                        width: 300px;
                        font-weight: 700;
                        font-size: 18px;
                    }

                    MaterialText {
                        text: "Daily";
                        horizontal-alignment: center;
                        width: 200px;
                        font-weight: 700;
                        font-size: 18px;
                    }

                    MaterialText {
                        text: "Weekly";
                        horizontal-alignment: center;
                        width: 200px;
                        font-weight: 700;
                        font-size: 18px;
                    }

                    MaterialText {
                        text: "Monthly";
                        horizontal-alignment: center;
                        width: 200px;
                        font-weight: 700;
                        font-size: 18px;
                    }
                }

                ListView {
                    for report in reports: Horizontal {
                        MaterialText {
                            text: report.name;
                            horizontal-alignment: center;
                            width: 300px;
                            font-size: 16px;
                        }

                        MaterialText {
                            text: report.daily_hours;
                            horizontal-alignment: center;
                            width: 200px;
                            font-size: 16px;
                        }

                        MaterialText {
                            text: report.weekly_hours;
                            horizontal-alignment: center;
                            width: 200px;
                            font-size: 16px;
                        }

                        MaterialText {
                            text: report.monthly_hours;
                            horizontal-alignment: center;
                            width: 200px;
                            font-size: 16px;
                        }
                    }
                }
            }

            if show_settings: Vertical {
                MaterialText {
                    text: "Printer Settings";
                    font-size: 24px;
                    font-weight: 700;
                    horizontal-alignment: center;
                }

                FilledButton {
                    text: "Test Printer Connection";
                    clicked => {
                        test_printer_connection();
                    }
                }

                MaterialText {
                    text: printer_status_message;
                    font-size: 18px;
                    horizontal-alignment: center;
                }
            }

            if show_workers_tab: Vertical {
                Horizontal {
                    MaterialText {
                        text: "Add Worker:";
                        font-size: 18px;
                    }

                    add-name := TextField {
                        placeholder_text: "Name";
                    }

                    add-barcode := TextField {
                        placeholder_text: "Barcode";
                    }

                    FilledButton {
                        text: "Add";
                        clicked => {
                            add_worker(add-name.text, add-barcode.text);
                            add-name.text = "";
                            add-barcode.text = "";
                        }
                    }
                }

                ListView {
                    for worker in management_workers: TouchArea {
                        Vertical {
                            MaterialText {
                                text: worker.name;
                                font-size: 18px;
                            }
                        }

                        clicked => {
                            selected_worker = worker.name;
                            selected_worker_barcode = worker.barcode;
                        }
                    }
                }

                if selected_worker != "": Vertical {
                    Horizontal {
                        MaterialText {
                            text: "Edit Worker:";
                            font-size: 18px;
                        }

                        edit-name := TextField {
                            text: selected_worker;
                        }

                        edit-barcode := TextField {
                            text: selected_worker_barcode;
                        }
                    }

                    Horizontal {
                        FilledButton {
                            text: "Save";
                            clicked => {
                                edit_worker(selected_worker, edit-name.text, edit-barcode.text);
                                selected_worker = "";
                                selected_worker_barcode = "";
                            }
                        }
                    }
                }
            }
        }
    }
}
